generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model addresses {
  address_id         Int                 @id @default(autoincrement())
  city               String              @db.VarChar(255)
  first_address      String              @db.VarChar(255)
  second_address     String?             @db.VarChar(255)
  postcode           String              @db.VarChar(255)
  user_id            Int
  coordinates        String?             @db.VarChar(255)
  notes              String?             @db.VarChar(255)
  users              users               @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "fkaddresses857531")
  billing_addresses  billing_addresses?
  shipping_addresses shipping_addresses?
}

model billing_addresses {
  address_id Int       @id
  country    String    @db.VarChar(255)
  addresses  addresses @relation(fields: [address_id], references: [address_id], onDelete: Cascade, map: "fkbilling_ad507106")
}

model bundles {
  bundle_id     Int             @id @default(autoincrement())
  price         Float
  notes         String?         @db.VarChar(511)
  bundles_items bundles_items[]
}

model bundles_items {
  bundle_id Int
  item_id   Int
  bundles   bundles @relation(fields: [bundle_id], references: [bundle_id], onDelete: Cascade, map: "fkbundles_it784788")
  items     items   @relation(fields: [item_id], references: [item_id], map: "fkbundles_it21538")

  @@id([bundle_id, item_id])
}

model carts {
  user_id Int
  item_id Int
  amount  Int
  items   items @relation(fields: [item_id], references: [item_id], onDelete: Cascade, map: "fkcarts400421")
  users   users @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "fkcarts255711")

  @@id([user_id, item_id])
}

model discounts {
  discount_id Int     @id @default(autoincrement())
  percentage  Int
  notes       String? @db.VarChar(511)
  items       items[]
}

model emails {
  email_id Int      @id @default(autoincrement())
  trigger  String   @db.VarChar(255)
  datetime DateTime @db.Timestamp(6)
  user_id  Int?
  users    users?   @relation(fields: [user_id], references: [user_id], map: "fkemails453837")
}

model items {
  item_id              Int                    @id @default(autoincrement())
  name                 String                 @unique @db.VarChar(255)
  description          String                 @db.VarChar(511)
  price_total          Float
  vat_id               Int
  amount_available     Int
  price_unit           String                 @db.VarChar(255)
  photo_loc            String                 @db.VarChar(255)
  entry_date           DateTime               @default(dbgenerated("(now())::timestamp without time zone")) @db.Timestamp(6)
  discount_id          Int?
  discounts            discounts?             @relation(fields: [discount_id], references: [discount_id], onDelete: Cascade, map: "fkitems605249")
  vat                  vat                    @relation(fields: [vat_id], references: [vat_id], map: "items_vat_vat_id_fk")
  bundles_items        bundles_items[]
  carts                carts[]
  categories_items     categories_items[]
  items_hold           items_hold[]
  keywords             keywords[]
  sub_categories_items sub_categories_items[]
}

model log_accesses {
  log_access_id Int      @id @default(autoincrement())
  ip            String   @db.VarChar(255)
  trigger       String   @db.VarChar(255)
  datetime      DateTime @db.Timestamp(6)
  user_id       Int?
  users         users?   @relation(fields: [user_id], references: [user_id], map: "fklog_access736030")
}

model orders {
  order_id        String            @id @db.VarChar
  price_total     Float
  shipping_cost   Float             @default(0)
  datetime        DateTime          @db.Timestamp(6)
  archive         String
  status          String            @db.VarChar(255)
  user_id         Int
  vat_total       Float
  phone_number    String            @default("+44 77 2309 3701") @db.VarChar(63)
  reference       String            @unique(map: "orders_reference_uindex") @db.VarChar
  users           users             @relation(fields: [user_id], references: [user_id], onDelete: SetNull, map: "fkorders458716")
  orders_delivery orders_delivery[]
  payment_methods payment_methods?
}

model refresh_tokens {
  token_id     Int            @id @default(autoincrement())
  version      Int            @default(1)
  user_id      Int
  auth_level   String         @default("standard") @db.VarChar(63)
  users        users          @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "fkrefresh_to114230")
  access_token access_token[]
}

model shipping_addresses {
  address_id Int       @id
  addresses  addresses @relation(fields: [address_id], references: [address_id], onDelete: Cascade, map: "fkshipping_a233077")
}

model users {
  user_id            Int              @id @default(autoincrement())
  name               String           @db.VarChar(255)
  surname            String           @db.VarChar(255)
  dob                DateTime         @db.Date
  email              String?          @unique @db.VarChar(255)
  password           String           @db.VarChar(511)
  role               String           @default("client") @db.VarChar(255)
  email_to_verify    String?          @unique(map: "users_email_to_verify_uindex") @db.VarChar(255)
  entry_date         DateTime         @default(now()) @db.Timestamptz(6)
  stripe_customer_id String?          @unique(map: "users_stripe_customer_id_uindex") @db.VarChar(255)
  addresses          addresses[]
  carts              carts[]
  emails             emails[]
  log_accesses       log_accesses[]
  orders             orders[]
  recover_tokens     recover_tokens[]
  refresh_tokens     refresh_tokens[]
}

model access_token {
  token_id         Int            @id(map: "access_token_pk") @default(autoincrement())
  ip               String         @db.VarChar(64)
  ua               String         @db.VarChar(255)
  refresh_token_id Int
  auth_level       String         @default("standard") @db.VarChar(63)
  refresh_tokens   refresh_tokens @relation(fields: [refresh_token_id], references: [token_id], onDelete: Cascade, map: "access_token_refresh_tokens_token_id_fk")
}

model vat {
  vat_id     Int     @id(map: "vat_pk") @default(autoincrement())
  percentage Float   @unique(map: "vat_percentage_uindex")
  items      items[]
}

model categories {
  category_id      Int                @id(map: "categories_pk") @default(autoincrement())
  name             String             @unique(map: "categories_category_uindex") @db.VarChar(255)
  notes            String?            @db.VarChar(511)
  categories_items categories_items[]
  sub_categories   sub_categories[]
}

model categories_items {
  category_id Int
  item_id     Int
  categories  categories @relation(fields: [category_id], references: [category_id], onDelete: Cascade, map: "categories_items_categories_category_id_fk")
  items       items      @relation(fields: [item_id], references: [item_id], onDelete: Cascade, map: "categories_items_items_item_id_fk")

  @@id([category_id, item_id], map: "categories_items_pk")
}

model sub_categories {
  sub_category_id      Int                    @id(map: "list_items_pkey") @default(autoincrement())
  name                 String                 @unique(map: "list_items_category_key") @db.VarChar(255)
  notes                String?                @db.VarChar(511)
  category_id          Int
  categories           categories             @relation(fields: [category_id], references: [category_id], map: "sub_categories_categories_category_id_fk")
  sub_categories_items sub_categories_items[]
}

model sub_categories_items {
  sub_category_id Int
  item_id         Int
  items           items          @relation(fields: [item_id], references: [item_id], onDelete: Cascade, map: "fklist_items683058")
  sub_categories  sub_categories @relation(fields: [sub_category_id], references: [sub_category_id], onDelete: Cascade, map: "fklist_items450170")

  @@id([sub_category_id, item_id], map: "sub_categories_items_pk")
}

model recover_tokens {
  token_id Int      @id(map: "tokens_pkey") @default(autoincrement())
  secret   String   @unique(map: "tokens_secret_key") @db.VarChar(511)
  user_id  Int
  status   String   @default("PENDING") @db.VarChar(63)
  expiry   DateTime @default(now()) @db.Timestamptz(6)
  users    users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "fktokens874970")

  @@unique([secret, expiry], map: "recover_tokens_pk")
}

model keywords {
  keyword String @db.VarChar(63)
  item_id Int
  items   items  @relation(fields: [item_id], references: [item_id], onDelete: Cascade, map: "keywords_items_item_id_fk")

  @@id([keyword, item_id], map: "keywords_pk")
}

model orders_delivery {
  order_delivery_id Int       @id(map: "orders_delivery_pk") @default(autoincrement())
  suggested         String?   @db.VarChar(255)
  actual            DateTime? @unique(map: "orders_delivery_actual_uindex") @db.Timestamptz(6)
  order_id          String    @db.VarChar
  orders            orders    @relation(fields: [order_id], references: [order_id], onDelete: Cascade, map: "orders_delivery_orders_order_id_fk")
}

model payment_intents {
  payment_intent_id String   @id(map: "payment_intents_pk") @db.VarChar(255)
  hash              String   @unique(map: "payment_intents_hash_uindex") @db.VarChar(255)
  expiry_datetime   DateTime @db.Timestamptz(6)
}

model items_hold {
  payment_intent_id String   @db.VarChar
  item_id           Int
  amount            Int
  expiry_datetime   DateTime @db.Timestamptz(6)
  items             items    @relation(fields: [item_id], references: [item_id], map: "items_hold_items_item_id_fk")

  @@id([payment_intent_id, item_id], map: "items_hold_pk")
}

model payment_methods {
  reference String @id(map: "payment_methods_pk") @db.VarChar
  type      String @db.VarChar
  account   String @db.VarChar
  orders    orders @relation(fields: [reference], references: [reference], onDelete: Cascade, map: "payment_methods_orders_reference_fk")
}
